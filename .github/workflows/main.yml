name: CI

on:
  push:
    branches: [ "main", "development", "release" ]
  pull_request:
    branches: [ "main", "development", "release" ]
  workflow_dispatch:

jobs:
  setup-uv:
    name: Setup uv
    runs-on: ubuntu-latest
    outputs:
      uv-path: ${{ steps.export-path.outputs.uv-path }}
    steps:
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        id: export-path
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "uv-path=$HOME/.local/bin" >> "$GITHUB_OUTPUT"

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-install

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run a one-line script
        run: echo Hello, world!

      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  tests:
    needs: setup-uv
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Use cached uv
        run: echo "${{ needs.setup-uv.outputs.uv-path }}" >> "$GITHUB_PATH"

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-venv-${{ hashFiles('uv.lock') }}-${{ hashFiles('pyproject.toml', 'requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-venv-

      - name: Sync dependencies (pyproject/requirements)
        env:
          UV_PYTHON_DOWNLOADS: "0"
        run: |
          set -e
          uv sync --frozen --dev

      - name: Run pytest
        env:
          CI: "true"
          PYTHONUNBUFFERED: "1"
        run: |
          uv run pytest

  docs:
    needs: setup-uv
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use cached uv
        run: echo "${{ needs.setup-uv.outputs.uv-path }}" >> "$GITHUB_PATH"

      - name: Build docs (MkDocs)
        run: |
          # Требуется mkdocs.yml и каталог docs/
          uvx --from mkdocs-material mkdocs build --strict

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy-docs:
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/release'))
    needs: docs
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
